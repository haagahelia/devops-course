"use strict";(self.webpackChunkdevops=self.webpackChunkdevops||[]).push([[714],{2945:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/github_actions_tab-ab3e5f575a0b6b476442144cb0cf3b42.png"},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>l});var t=o(6540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}},9433:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"automating/workflows","title":"Writing workflows","description":"Writing your first GitHub Actions workflow","source":"@site/docs/automating/workflows.md","sourceDirName":"automating","slug":"/automating/workflows","permalink":"/devops-course/docs/automating/workflows","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/automating/workflows.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Writing workflows"},"sidebar":"tutorialSidebar","previous":{"title":"Github Actions","permalink":"/devops-course/docs/automating/githubActions"},"next":{"title":"CI Pipelines","permalink":"/devops-course/docs/automating/cipipeline"}}');var s=o(4848),i=o(8453);const r={sidebar_position:3,title:"Writing workflows"},l=void 0,a={},c=[{value:"Writing your first GitHub Actions workflow",id:"writing-your-first-github-actions-workflow",level:3},{value:"Multiple jobs",id:"multiple-jobs",level:3},{value:"Scheduling workflows",id:"scheduling-workflows",level:3},{value:"Multiple workflows",id:"multiple-workflows",level:3},{value:"Further reading",id:"further-reading",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h3,{id:"writing-your-first-github-actions-workflow",children:"Writing your first GitHub Actions workflow"}),"\n",(0,s.jsxs)(n.p,{children:["Workflows are defined using YAML syntax (",(0,s.jsx)(n.a,{href:"https://yaml.org/",children:"https://yaml.org/"}),"). Workflow files must have either a ",(0,s.jsx)(n.code,{children:".yml"})," or ",(0,s.jsx)(n.code,{children:".yaml"})," extension and they are save to ",(0,s.jsx)(n.code,{children:".github/workflows"})," directory in your repository. One way to create workflows is to navigate to your GitHub repository and open the Actions tab. There you can select pre-defined workflows or create your own by clicking 'set up a workflow' yourself as shown in the following image:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Github workflow creation",src:o(2945).A+"",width:"1764",height:"859"})}),"\n",(0,s.jsx)(n.admonition,{title:"TASK: Create the first workflow",type:"info",children:(0,s.jsxs)(n.p,{children:["Create a new repository to Github and enable ",(0,s.jsx)(n.em,{children:'"Add a README file"'})," to create ",(0,s.jsx)(n.code,{children:"README.md"})," file to your repository Then, follow the instructions in ",(0,s.jsx)(n.a,{href:"https://docs.github.com/en/actions/writing-workflows/quickstart#creating-your-first-workflow",children:"https://docs.github.com/en/actions/writing-workflows/quickstart#creating-your-first-workflow"})," to create and run your first Github actions workflow."]})}),"\n",(0,s.jsx)(n.p,{children:"Here's an example of a workflow file similar to the one you have created in the task. Let's break down its structure to understand how it works:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'name: GitHub Actions Demo\nrun-name: ${{ github.actor }} is testing out GitHub Actions \ud83d\ude80\non: [push]\njobs:\n  Explore-GitHub-Actions:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo "\ud83c\udf89 The job was automatically triggered by a ${{ github.event_name }} event."\n      - run: echo "\ud83d\udc27 This job is now running on a ${{ runner.os }} server hosted by GitHub!"\n      - run: echo "\ud83d\udd0e The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."\n      - name: Check out repository code\n        uses: actions/checkout@v4\n      - run: echo "\ud83d\udca1 The ${{ github.repository }} repository has been cloned to the runner."\n      - run: echo "\ud83d\udda5\ufe0f The workflow is now ready to test your code on the runner."\n      - name: List files in the repository\n        run: |\n          ls ${{ github.workspace }}\n      - run: echo "\ud83c\udf4f This job\'s status is ${{ job.status }}."\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"name"})," defines The name of the workflow."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"on"})," defines the event or events that triggers the workflow (e.g., push, pull_request, schedule). You can define multiple events that triggers the workflow in the following way ",(0,s.jsx)(n.code,{children:"[push, pull_request]"}),". Read more about ",(0,s.jsx)(n.a,{href:"https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows",children:"events that trigger workflow"})," in Github docs."]}),"\n",(0,s.jsx)(n.p,{children:"You can also limit the trigger to specific branches:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"on:\n  push:\n    branches:\n      - main\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, the workflow is configured to trigger whenever a push is made to the ",(0,s.jsx)(n.code,{children:"main"})," branch of the repository. You can also use inline bracket list as shown in the following example."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"on:\n  push:\n    branches: [main, develop]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"jobs"})," section specifies a set of tasks that the workflow will execute. In this example there is one job that is named ",(0,s.jsx)(n.code,{children:"Explore-GitHub-Actions"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"runs-on"})," defines that job runs on an ",(0,s.jsx)(n.code,{children:"ubuntu-latest"})," virtual machine. You can also specify the ubuntu version for example, ",(0,s.jsx)(n.code,{children:"runs-on: ubuntu-22.04"}),". Read more about choosing the runner for a job in ",(0,s.jsx)(n.a,{href:"https://docs.github.com/en/actions/writing-workflows/choosing-where-your-workflow-runs/choosing-the-runner-for-a-job",children:"Github docs"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"steps"})," defines the individual tasks within a job. The ",(0,s.jsx)(n.code,{children:"run"})," keyword is used to define a shell command or script that will be executed in a workflow step. Each ",(0,s.jsx)(n.code,{children:"run"})," step executes a command directly on the runner (the virtual machine or container where the job is running)."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Steps run sequentially, in order. Each step waits for the previous one to finish before starting."})}),"\n",(0,s.jsxs)(n.p,{children:["There are also multiline commands in ",(0,s.jsx)(n.code,{children:"steps"})," such as:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"- name: List files in the repository\n  run: |\n    ls ${{ github.workspace }}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This lists all files in the repository directory on the runner using the ls command. The ",(0,s.jsx)(n.code,{children:"${{ ... }}"})," syntax is used to access GitHub context variables. The ",(0,s.jsx)(n.code,{children:"${{ github.workspace }}"})," returns absolute path to the GitHub workspace directory on the runner. Read more in ",(0,s.jsx)(n.a,{href:"https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs",children:"accessing contextual information"})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"|"})," symbol in the run section of a GitHub Actions workflow is a YAML syntax feature *",(0,s.jsx)(n.strong,{children:"block scalar"}),". It is used to write multi-line strings or commands in a more readable format. You can write multiple shell commands under one run block, for example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'- name: List files in the repository\n  run: |\n    echo "Listing files:"\n    ls ${{ github.workspace }}\n    echo "Done"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"multiple-jobs",children:"Multiple jobs"}),"\n",(0,s.jsxs)(n.p,{children:["By default, when your workflow contains multiple jobs, they run in parallel. In the example below, there are three jobs: ",(0,s.jsx)(n.code,{children:"build"}),", ",(0,s.jsx)(n.code,{children:"test"}),", and ",(0,s.jsx)(n.code,{children:"deploy"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"deploy"})," job uses the ",(0,s.jsx)(n.code,{children:"needs"})," keyword to specify that it depends on the successful completion of both the ",(0,s.jsx)(n.code,{children:"build"})," and ",(0,s.jsx)(n.code,{children:"test"})," jobs. This means ",(0,s.jsx)(n.code,{children:"deploy"})," will only start after both of those jobs have finished successfully, ensuring that deployment happens only if the build and tests pass."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'name: Workflow with Dependencies\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo "Building..."\n\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo "Testing..."\n\n  deploy:\n    needs: [build, test]\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo "Deploying app only after build and test succeed"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["You can read more about ",(0,s.jsx)(n.code,{children:"needs"})," syntax ",(0,s.jsx)(n.a,{href:"https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idneeds",children:"here"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["GitHub has limits on the number of jobs that can run concurrently, which may vary based on your account type. Refer to the GitHub documentation for the details on these ",(0,s.jsx)(n.a,{href:"https://docs.github.com/en/actions/administering-github-actions/usage-limits-billing-and-administration",children:"limitations"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"scheduling-workflows",children:"Scheduling workflows"}),"\n",(0,s.jsxs)(n.p,{children:["You can schedule GitHub workflows using the ",(0,s.jsx)(n.code,{children:"schedule"})," event, which uses ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Cron",children:"cron"})," syntax to define when the workflow should run automatically."]}),"\n",(0,s.jsx)(n.p,{children:"The following example executes the workflow every Monday at 7:30 AM."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"on:\n  schedule:\n    - cron: '30 7 * * 1'\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can add multiple schedules by listing more cron entries."}),"\n",(0,s.jsx)(n.h3,{id:"multiple-workflows",children:"Multiple workflows"}),"\n",(0,s.jsxs)(n.p,{children:["If you have multiple workflow YAML files in your repository, GitHub Actions will trigger and run them independently and in parallel when their respective ",(0,s.jsx)(n.code,{children:"on"})," conditions are met. Each workflow runs in its own environment and does not wait for other workflows to finish unless you explicitly coordinate them."]}),"\n",(0,s.jsxs)(n.p,{children:["To coordinate workflows, you can use ",(0,s.jsx)(n.a,{href:"https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_run",children:(0,s.jsx)(n.code,{children:"workflow_run"})})," event to trigger one workflow after another completes. For example, you can configure a workflow to run only after another workflow has finished successfully."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'on:\n  workflow_run:\n    workflows: ["Build"]\n    types:\n      - completed\n'})}),"\n",(0,s.jsx)(n.p,{children:"Next, we start to implement our first CI pipeline using Github Actions."}),"\n",(0,s.jsx)(n.h3,{id:"further-reading",children:"Further reading"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.github.com/en/actions/writing-workflows",children:"https://docs.github.com/en/actions/writing-workflows"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);